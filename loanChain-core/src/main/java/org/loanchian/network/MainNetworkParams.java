package org.loanchian.network;

import org.loanchian.Configure;
import org.loanchian.crypto.Sha256Hash;
import org.loanchian.message.DefaultMessageSerializer;
import org.loanchian.message.MessageSerializer;
import org.loanchian.store.BlockStore;
import org.loanchian.utils.Hex;
import org.loanchian.utils.Utils;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetSocketAddress;

/**
 * 主网各参数
 * @author ln
 *
 */
public class MainNetworkParams extends NetworkParams {

	private static MainNetworkParams instance;

	public static synchronized MainNetworkParams get() {
		if (instance == null) {
			instance = new MainNetworkParams();
		}
		return instance;
	}

	public MainNetworkParams() {

		this.seedManager = new RemoteSeedManager();

		seedManager.add(new Seed(new InetSocketAddress("183.226.21.34", Configure.PORT)));//宽带
		seedManager.add(new Seed(new InetSocketAddress("223.104.25.85", Configure.PORT)));//yy手机
		seedManager.add(new Seed(new InetSocketAddress("123.147.248.89", Configure.PORT)));//cj手机
//		seedManager.add(new Seed(new InetSocketAddress("116.62.135.185", Configure.PORT)));
//		seedManager.add(new Seed(new InetSocketAddress("116.62.117.200", Configure.PORT)));
//		seedManager.add(new Seed(new InetSocketAddress("47.92.4.19", Configure.PORT)));
//		seedManager.add(new Seed(new InetSocketAddress("47.92.26.16", Configure.PORT)));

		init();
	}

	public MainNetworkParams(SeedManager seedManager, int port) {
		this.seedManager = seedManager;
		this.port = port;

		init();
	}

	private void init() {
		this.packetMagic = 86061588l;
		this.acceptableAddressCodes = new int[] {getSystemAccountVersion(), getCertAccountVersion()};
	}

	@Override
	public int getProtocolVersionNum(ProtocolVersion version) {
		return version.getVersion();
	}

	@Override
	public MessageSerializer getSerializer(boolean parseRetain) {
		return new DefaultMessageSerializer(this);
	}

	/**
	 * 创建创世快
	 * @return BlockStore
	 */
	@Override
	public BlockStore getGengsisBlock() {

		BlockStore gengsisBlock = new BlockStore(this, Hex.decode("0000000000000000000000000000000000000000000000000000000000000000000000005c1e833972b0037069e0c79ded2bc9fd2f37f96698bf4cade0d519f86bd763e9f6812f5a000000000000f6812f5a832102883a9625a871e79c070e316edafc97eac2f6c97b218d0e55726f25be2a963e9276a9144237cccf6ff9a7674a8fc47c60278fdd23e9f30988473045022100a823d9df8443841ad5da203e9fe1db7b96c874131ea512274e6fd3292efd0c9902207b8fb3fb7f01a0e878e2ee0597c1a937a9496654cd0abbe58cfb8eeb3a472e81ac090101000000010012117468697320612067656e6773697320747800000000010080faca73f91f00000000001976a914bb7e4d6ffb3266a0b533b21847bef4dacce95f4688acf6812f5a0000000000020100000001015997b6cf41d62564adfdd13dd70c37d1eb204becd12e00911a9d4eb664806f05000000006b483045022100aabf84f4d8134eccb501a5326b74aa7e33400f91ef68bb7a0ed55472bb46e0b902204eeebf62135358ee28400aba68562808ce5f9838372d05af8d33f54b855fac2101210276c52ff14acd4c4d3e08f9596e0127a15e98207b3d0024426364825cd724c86dffffffff020080c6a47e8d03000078c2481976a9144237cccf6ff9a7674a8fc47c60278fdd23e9f30988ac00003426f56b1c00000000001976a914bb7e4d6ffb3266a0b533b21847bef4dacce95f4688acf6812f5a00000000000601000000f6812f5a832102883a9625a871e79c070e316edafc97eac2f6c97b218d0e55726f25be2a963e9276a9144237cccf6ff9a7674a8fc47c60278fdd23e9f30988473045022100d1983f83d94f80f05ee4684422ee270db81f5299c09bb8a526ef5191b8df404402207e21075683ecc93620ca3a4e032ff86176cc936984cab2dde3656dba48dfbf1dac4237cccf6ff9a7674a8fc47c60278fdd23e9f30901000000000000000000000000000000000000000000000000000000000000000000000000000000000002010000000101257db0838193d27e7a4c8c8b5a9a416f341359b046fdbec6e15121e55f4031b5010000006a473044022032fa8d26f865e51b9c2b76113b7fecdc4faa41c1944a33b04bc89aa89f26e0730220269e496a6064a7e2c46a791ddd98bea622d76c56d94b37b7ab5a815d2d57e6ac01210276c52ff14acd4c4d3e08f9596e0127a15e98207b3d0024426364825cd724c86dffffffff020010a5d4e8000000000000001976a9144237cccf6ff9a7674a8fc47c60278fdd23e9f30988ac00f08e510c6b1c00000000001976a914bb7e4d6ffb3266a0b533b21847bef4dacce95f4688acf6812f5a000000000003010000000000f6812f5a0000000000822102883a9625a871e79c070e316edafc97eac2f6c97b218d0e55726f25be2a963e9276a9144237cccf6ff9a7674a8fc47c60278fdd23e9f30988463044022002e99456461e38bd31f0502e097cefb0e30d4e69ff3ffe6f5f666521cb14f9d8022052bc65f2feabdd2a398a0f5ecb9666a37a7d89fe81d6462345d9a768f6d5f64fac189f93494237cccf6ff9a7674a8fc47c60278fdd23e9f3090601000000f6812f5a832103a7db4a854e3f2ae3a30aa759bfd39045f6a80c967b3fd81036acebc54b557ece76a9142c1179b1e05fb8652644f6c61a033d284310091288473045022100c4ff881942a8e4689f3188469b54c7b524bf2095a31c42a7f3e3cc71c1fd048f022013322ec72b75bca878889128c4bd08198c8343e1132f88979e15ad274c5ee510ac2c1179b1e05fb8652644f6c61a033d284310091201000000000000000000000000000000000000000000000000000000000000000000000000000000000002010000000101b7903afa4d7ce6f28e751cdb951f5084be7b46cff498a4016da6f3dc8d43a8e7010000006b48304502210099a878a03f53a62ebe1690cef1aaf3ebdf4ee0688cd54b0e93d21774bf85cfcf0220701db0c0e035fb63bf60b1a6d09a7938746e32766c0a240c85e177e5d453f4d601210276c52ff14acd4c4d3e08f9596e0127a15e98207b3d0024426364825cd724c86dffffffff020010a5d4e8000000000000001976a9142c1179b1e05fb8652644f6c61a033d284310091288ac00e0e97c236a1c00000000001976a914bb7e4d6ffb3266a0b533b21847bef4dacce95f4688acf6812f5a000000000003010000000000f6812f5a0000000000832103a7db4a854e3f2ae3a30aa759bfd39045f6a80c967b3fd81036acebc54b557ece76a9142c1179b1e05fb8652644f6c61a033d284310091288473045022100ddbec0eb8250808673ba940d76a22a8474443eb67c8ae9e1fceda37d0e7b368e02207b3bf81413cf198ce7d7b34d44419f27f6f64d62d9fd43ee3df203531aa671d3ac1e9f93492c1179b1e05fb8652644f6c61a033d28431009120b0100000043da7e5982c220256303b7fa1e89761bf37c1a8415524dbcb9ec1b4033ce71d4224699e8459235c314dd1c14ee4f4642eb9c3e14cc97a3c3d3629708ea88473045022100c50a56f6bb25ea2ade3b83def48d7b55401916f711a634a8b2163b555343cef502203cda9a0c6735c72cf4599def1eaec90f32206e69ded301be46168aa2ad0286aaacdd1c14ee4f4642eb9c3e14cc97a3c3d3629708eadd1c14ee4f4642eb9c3e14cc97a3c3d3629708ea01fd23022b046e616d6506e5908de7a7b01ee9878de5ba86e58db0e993bee7a791e68a80e69c89e99990e585ace58fb822076164647265737306e59cb0e59d8012e9878de5ba86e5b882e58d97e5b2b8e58cba44046c6f676f06e59bbee7898737687474703a2f2f66696c652e696e636861696e2e6f72672f696d616765732f696e636861696e5f6c6f676f5f313030783130302e706e672b0a637265646974436f64650ce4bfa1e794a8e4bba3e7a0811239313530303130384d41355542333248334e1a0570686f6e6506e794b5e8af9d0c3032332d383633333130363927077765627369746506e5ae98e7bd911768747470733a2f2f7777772e696e636861696e2e6f7267fd1d0108646573637269707406e68f8fe8bfb0fd0a01e9878de5ba86e58db0e993bee7a791e68a80e69c89e99990e585ace58fb8e698afe4b880e5aeb6e4bba5e58cbae59d97e993bee68a80e69cafe9a9b1e58aa8e79a84e5889be696b0e59e8be4bc81e4b89aefbc8ce585b6e4b8bbe5afbce79a84e58cbae59d97e993bee7a4bee58cbae9a1b9e79bae496e636861696e2de58db0e993bee698afe4b880e4b8aae4bba5e998b2e4bcaae4b8bae59fbae7a180e4b89ae58aa1e79a84e585ace5bc80e5b9b3e58fb0efbc8ce4b8bae7a4bee4bc9ae59084e4bc81e4b89ae38081e69cbae69e84e38081e889bae69cafe5aeb6e7ad89e68f90e4be9be59381e7898ce38081e79fa5e8af86e4baa7e69d83e4bf9de68aa4e69c8de58aa1e380820221023cbfda1ae93a41187634206177a0482ee2c890540bd907a7f6fbdde9e5a31c3b2103489e3933f41327c2463b664776a4355860cf5b093c106d21f0253f83dda76465012103df243c24dfe4ea420c776e8d46fbc2a86c6e439648119f64b583a38a0c7d84fd00"));
		Sha256Hash merkleHash = gengsisBlock.getBlock().buildMerkleHash();

		if(log.isDebugEnabled()) {
			log.debug("创世块的哈希 : {}", merkleHash);
		}

		Utils.checkState("5c1e833972b0037069e0c79ded2bc9fd2f37f96698bf4cade0d519f86bd763e9".equals(Hex.encode(merkleHash.getBytes())), "the gengsis block merkle hash is error");

		if(log.isDebugEnabled()) {
			log.debug("创世块的哈希键KEY : {}", gengsisBlock.getBlock().getHash());
		}

		Utils.checkState("9e322eede697710736fe6064ee8aab7e02b628b357ab7d51e8f0845424df16a2".equals(Hex.encode(gengsisBlock.getBlock().getHash().getBytes())), "the gengsis block hash is error");

		return gengsisBlock;
	}

	/**
	 * 获取该网络的认证管理账号的hash160
	 * @return byte[]
	 */
	@Override
	public byte[] getCommunityManagerHash160() {

		return Hex.decode("48d883f777d63b3db0b89a864363c0dc90a27a71");
	}

	/**
	 * 主网普通地址以o开头
	 * return
	 */
	@Override
	public int getSystemAccountVersion() {
		return 111;
	}

	/**
	 * 主网，认证地址以A开头
	 * return
	 */
	@Override
	public int getCertAccountVersion() {
		return 65;
	}

}
